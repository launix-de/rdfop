@PREFIX lx: <https://launix.de/rdf/#> .

?><!doctype html><html><head>
<meta charset="utf-8">
<title>RDFOP — Home</title>
<style>
  :root { --bg: #f5f7fb; --panel: #ffffff; --text: #0f172a; --muted: #6b7280; --ring:#e5e7eb; }
  html, body { height: 100%; margin: 0; background: var(--bg); font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Arial, "Apple Color Emoji", "Segoe UI Emoji"; color: var(--text); }
  .canvas { position: absolute; inset: 0; padding: 6vh 8vw; }
  .board { width: 100%; height: 100%; background: var(--panel); border-radius: 14px; box-shadow: 0 10px 30px rgba(2,6,23,.08), 0 2px 6px rgba(2,6,23,.06); }
  .gear { position: fixed; top: 16px; right: 16px; background: var(--panel); border: 1px solid var(--ring); border-radius: 10px; padding: 8px 10px; cursor: pointer; line-height: 1; box-shadow: 0 2px 8px rgba(0,0,0,.08); z-index: 1000; }
  .gear:hover { transform: translateY(-1px); }
  .menu { position: fixed; top: 56px; right: 16px; background: var(--panel); border: 1px solid var(--ring); border-radius: 12px; min-width: 220px; box-shadow: 0 12px 36px rgba(2,6,23,.14), 0 4px 10px rgba(2,6,23,.08); display: none; z-index: 1000; }
  .menu.open { display: block; }
  .menu a { display: block; padding: 12px 14px; text-decoration: none; color: var(--text); }
  .menu a:hover { background: #f8fafc; }
  .visually-hidden { position: absolute; width: 1px; height: 1px; margin: -1px; padding: 0; overflow: hidden; clip: rect(0 0 0 0); white-space: nowrap; border: 0; }
  .brand { position: fixed; left: 24px; top: 20px; color: var(--muted); font-weight: 600; letter-spacing: .02em; z-index: 1000; }
  .gear .icon { font-size: 18px; display: inline-block; }
  .muted { color: var(--muted); }
  .card { background: var(--panel); border: 1px solid var(--ring); border-radius: 12px; box-shadow: 0 8px 24px rgba(2,6,23,.08); overflow: hidden; }
  .table { width: 100%; border-collapse: collapse; }
  .table th { background: #f8fafc; font-weight: 600; color: #0f172a; text-align: left; }
  .table th, .table td { padding: 10px 12px; border-bottom: 1px solid var(--ring); }
  .table tr:last-child td { border-bottom: none; }
  .empty { color: var(--muted); text-align: center; }
  .error { color: #b91c1c; }
  .input { border: 1px solid var(--ring); border-radius: 8px; padding: 10px 12px; font: inherit; }
  .btn { display: inline-block; border-radius: 8px; padding: 8px 12px; border: 1px solid var(--ring); background: #ffffff; cursor: pointer; }
  .btn.primary { background: #0ea5e9; color: white; border-color: #0ea5e9; }
  .container { max-width: 960px; margin: 0 auto; }
  .pad { padding: 12px 12px 14px; }
  .mt-2 { margin-top: 8px; }
  .mt-4 { margin-top: 1rem; }
  .w-100 { width: 100%; }
  .h-30vh { height: 30vh; }
  .max-800 { max-width: 800px; }
  /* Overlay styles */
  .overlay-backdrop { position: fixed; inset: 0; background: rgba(15,23,42,.5); z-index: 2000; }
  .overlay-window { position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: var(--panel); border-radius: 12px; box-shadow: 0 16px 48px rgba(2,6,23,.3), 0 6px 16px rgba(2,6,23,.18); width: min(92vw, 980px); max-height: 86vh; overflow: auto; z-index: 2001; }
  .overlay-content { padding: 18px 20px; }
  .overlay-close { position: absolute; top: 8px; right: 10px; background: transparent; border: 0; font-size: 20px; cursor: pointer; color: #334155; }
</style>
</head><body>
  <div class="brand">RDFOP</div>
  <button id="gear" class="gear" aria-haspopup="true" aria-expanded="false" aria-controls="menu" aria-label="Open menu">
    <span class="icon" aria-hidden="true">⚙</span>
  </button>
  <nav id="menu" class="menu" role="menu">
    <a role="menuitem" href="/explorer">Knowledge base explorer</a>
    <a role="menuitem" href="/settings">Settings</a>
    <a role="menuitem" href="/ttl-import">TTL import</a>
  </nav>
  <div class="canvas">
    <div class="board" role="region" aria-label="Canvas">
      <?rdf CALL render_component("main", REQ, RES) ?>
    </div>
  </div>
  <script>
    (function(){
      const btn = document.getElementById('gear');
      const menu = document.getElementById('menu');
      const toggle = () => {
        const open = !menu.classList.contains('open');
        menu.classList.toggle('open', open);
        btn.setAttribute('aria-expanded', open ? 'true' : 'false');
      };
      btn.addEventListener('click', (e) => { e.stopPropagation(); toggle(); });
      document.addEventListener('click', (e) => { if(menu.classList.contains('open')) menu.classList.remove('open'); });
      document.addEventListener('keydown', (e) => { if(e.key === 'Escape') menu.classList.remove('open'); });

      // Overlay helper
      // Overlay stack
      window.__overlayZ = window.__overlayZ || 2000;
      window.__overlayStack = window.__overlayStack || [];

      function buildOverlaySkeleton(){
        const backdrop = document.createElement('div');
        backdrop.className = 'overlay-backdrop';
        const modal = document.createElement('div');
        modal.className = 'overlay-window';
        modal.setAttribute('role','dialog');
        modal.setAttribute('aria-modal','true');
        const z = (window.__overlayZ = (window.__overlayZ + 2));
        backdrop.style.zIndex = String(z);
        modal.style.zIndex = String(z + 1);
        const closeBtn = document.createElement('button');
        closeBtn.className = 'overlay-close';
        closeBtn.setAttribute('aria-label','Close');
        closeBtn.textContent = '✕';
        const content = document.createElement('div');
        content.className = 'overlay-content';
        modal.appendChild(closeBtn);
        modal.appendChild(content);
        document.body.appendChild(backdrop);
        document.body.appendChild(modal);

        const close = () => {
          backdrop.remove();
          modal.remove();
          const idx = window.__overlayStack.findIndex(x => x.modal === modal);
          if (idx !== -1) window.__overlayStack.splice(idx,1);
        };
        backdrop.addEventListener('click', close);
        closeBtn.addEventListener('click', close);
        document.addEventListener('keydown', function esc(e){
          if(e.key==='Escape'){
            const top = window.__overlayStack[window.__overlayStack.length-1];
            if (top && top.modal === modal) { close(); document.removeEventListener('keydown', esc); }
          }
        });
        window.__overlayStack.push({ backdrop, modal, content });
        return { backdrop, modal, content, closeBtn };
      }

      function openOverlay(url){ return overlayFetch(url, null, false); }
      window.openOverlay = openOverlay;

      function openOverlayHTML(html){
        const { content, closeBtn } = buildOverlaySkeleton();
        content.innerHTML = html;
        closeBtn.focus();
      }
      window.openOverlayHTML = openOverlayHTML;

      // Unified overlay request: body=null -> GET, body=FormData -> POST; replace toggles in-place update
      async function overlayFetch(url, body, replace){
        const headers = { 'X-Requested-With': 'fetch', 'Accept': 'text/html' };
        let opts = { headers };
        if (body != null) {
          // Ensure x-www-form-urlencoded for server-side bodyParts parsing
          if (body instanceof URLSearchParams) {
            headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';
            opts = { method: 'POST', headers, body: body.toString() };
          } else if (typeof body === 'string') {
            headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';
            opts = { method: 'POST', headers, body };
          } else {
            try {
              const p = new URLSearchParams(body);
              headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';
              opts = { method: 'POST', headers, body: p.toString() };
            } catch(e) {
              // Fallback: still send, but server may not parse
              opts = { method: 'POST', headers, body };
            }
          }
        }
        let target;
        if (replace && window.__overlayStack.length) target = window.__overlayStack[window.__overlayStack.length-1];
        if (!target) target = buildOverlaySkeleton();
        try {
          const resp = await fetch(url, opts);
          const html = await resp.text();
          target.content.innerHTML = html;
        } catch (e) {
          target.content.innerHTML = '<div style=\"color:#b91c1c\">Request failed.</div>';
        }
        if (target.closeBtn) target.closeBtn.focus();
      }
      window.overlayFetch = overlayFetch;

      function openOverlayReplace(url){ return overlayFetch(url, null, true); }
      window.openOverlayReplace = openOverlayReplace;

      // Helper to submit forms into overlays (stacked)
      window.openOverlaySubmit = function(form){
        const action = form.getAttribute('action') || location.href;
        const method = (form.getAttribute('method') || 'GET').toUpperCase();
        const params = new URLSearchParams(new FormData(form));
        if (method === 'POST') {
          return overlayFetch(action, params, false), false;
        }
        const url = action + (action.includes('?') ? '&' : '?') + params.toString();
        return overlayFetch(url, null, false), false;
      };

      // Helper to submit forms replacing current overlay
      window.openOverlaySubmitReplace = function(form){
        const action = form.getAttribute('action') || location.href;
        const method = (form.getAttribute('method') || 'GET').toUpperCase();
        const params = new URLSearchParams(new FormData(form));
        if (method === 'POST') {
          return overlayFetch(action, params, true), false;
        }
        const url = action + (action.includes('?') ? '&' : '?') + params.toString();
        return overlayFetch(url, null, true), false;
      };

      // Global delegation for overlay forms
      document.addEventListener('submit', function(e){
        const form = e.target;
        if (form && form.classList && form.classList.contains('overlay-form')) {
          e.preventDefault();
          window.openOverlaySubmit(form);
        }
      }, true);

      document.addEventListener('submit', async function(e){
        const form = e.target;
        if (!form || !form.dataset || !form.dataset.rdfopPageEditor) return;

        e.preventDefault();

        const container = form.closest('[data-page-target]');
        const status = container ? container.querySelector('.page-edit__status') : null;
        const subject = (form.elements.subject && form.elements.subject.value || '').trim();

        if (!subject) {
          if (status) {
            status.textContent = 'Missing subject.';
            status.className = 'page-edit__status error';
          }
          return;
        }

        const title = form.elements.title && form.elements.title.value || '';
        const bodyValue = form.elements.body && form.elements.body.value || '';
        const iri = subject.startsWith('<') ? subject : (subject.startsWith('_:') ? subject : `<${subject}>`);
        const literalTitle = JSON.stringify(title);
        const literalBody = JSON.stringify(bodyValue);
        const sparql = `PREFIX rdfop: <https://launix.de/rdfop/schema#>
DELETE { ${iri} rdfop:pageTitle ?oldTitle . ${iri} rdfop:pageBody ?oldBody . }
INSERT { ${iri} rdfop:pageTitle ${literalTitle} . ${iri} rdfop:pageBody ${literalBody} . }
WHERE { OPTIONAL { ${iri} rdfop:pageTitle ?oldTitle } OPTIONAL { ${iri} rdfop:pageBody ?oldBody } }`;

        if (status) {
          status.textContent = 'Saving...';
          status.className = 'page-edit__status muted';
        }

        try {
          const resp = await fetch('/rdf/rdf', {
            method: 'POST',
            headers: { 'Content-Type': 'application/sparql-update' },
            body: sparql
          });
          if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
          if (status) {
            status.textContent = 'Saved. Reloading...';
            status.className = 'page-edit__status';
          }
          setTimeout(() => window.location.reload(), 400);
        } catch (err) {
          if (status) {
            status.textContent = 'Save failed.';
            status.className = 'page-edit__status error';
          }
          console.error('rdfop page editor save failed', err);
        }
      }, true);

      // Helper for links to open stacked overlays
      window.openOverlayLink = function(a){
        const href = (a && a.getAttribute) ? a.getAttribute('href') : a;
        if (href) openOverlay(href);
        return false;
      };

      // Read a file into a textarea in the same form
      window.readFileToTextarea = function(input, selector){
        try {
          const f = input && input.files && input.files[0];
          if (!f) return false;
          const form = input.closest('form');
          const ta = form && form.querySelector(selector || 'textarea');
          if (!ta) return false;
          f.text().then(txt => { ta.value = txt; });
        } catch(e) {}
        return false;
      };

      // Intercept menu clicks
      Array.from(menu.querySelectorAll('a[href]')).forEach(a => {
        a.addEventListener('click', (e) => {
          e.preventDefault();
          const href = a.getAttribute('href');
          openOverlay(href);
          menu.classList.remove('open');
        });
      });
    })();
  </script>
</body></html>
