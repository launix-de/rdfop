@prefix rdfop: <https://launix.de/rdfop/schema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

################################################################
# RDFOP Final Self-Describing Schema
################################################################

# Classes
rdfop:EntityType a rdfs:Class .
rdfop:Attribute a rdfs:Class .
rdfop:EditorComponent a rdfs:Class .
rdfop:CodeGenerator a rdfs:Class .
rdfop:Expr a rdfs:Class .
rdfop:Parameter a rdfs:Class .
rdfop:ChangeSet a rdfs:Class .
rdfop:Tenant a rdfs:Class .
# TODO: rdfop:Enum

# TODO: owl:cardinality 1 for required attributes
# TODO: owl:minCardinality 1 for required multi-attributes
# TODO: owl:maxCardinality 1 for optional attributes
# TODO: schema verifier inside the transaction

# Entity / Attribute definitions
rdfop:hasAttribute a rdf:Property ; rdfs:domain rdfop:EntityType ; rdfs:range rdfop:Attribute .
rdfop:attrName a rdf:Property ; rdfs:domain rdfop:Attribute ; rdfs:range rdfs:Literal .
rdfop:attrType a rdf:Property ; rdfs:domain rdfop:Attribute ; rdfs:range rdfs:Resource . # reference to type or datatype
rdfop:cardinality a rdf:Property ; rdfs:domain rdfop:Attribute ; rdfs:range rdfs:Literal . # "0..1", "1", "0..n"
rdfop:attrKind a rdf:Property ; rdfs:domain rdfop:Attribute ; rdfs:range rdfs:Literal .
rdfop:recursiveDelete a rdf:Property ; rdfs:domain rdfop:EntityType ; rdfs:range rdfs:Literal .

# Editor components
rdfop:forTypes a rdf:Property ; rdfs:domain rdfop:EditorComponent ; rdfs:range rdfop:EntityType .
rdfop:parameters a rdf:Property ; rdfs:domain rdfop:EditorComponent ; rdfs:range rdfs:Literal . # specify the parameters that have to be set to instanciate this component
rdfop:input a rdf:Property ; rdfs:domain rdfop:EditorComponent ; rdfs:range rdfs:Literal . # RDFJSON query (can use the parameters) to fetch the `data` object
rdfop:inputVariable a rdf:Property ; rdfs:domain rdfop:EditorComponent ; rdfs:range rdfs:Literal . # bind JSON to this object? (for nested templates that should be able to access their parents data)
rdfop:template a rdf:Property ; rdfs:domain rdfop:EditorComponent ; rdfs:range rdfs:Literal . # RDFHP query (can use the parameters) to render the vue.js template
rdfop:initTemplate a rdf:Property ; rdfs:domain rdfop:EditorComponent ; rdfs:range rdfs:Literal . # JSON object for new items

# Code Generators
rdfop:handlesNodeType a rdf:Property ; rdfs:domain rdfop:CodeGenerator ; rdfs:range rdfop:EntityType .
rdfop:language a rdf:Property ; rdfs:domain rdfop:CodeGenerator ; rdfs:range rdfs:Literal .
rdfop:template a rdf:Property ; rdfs:domain rdfop:CodeGenerator ; rdfs:range rdfs:Literal .

# Expressions (TODO: add more Classes: ExprConstant, ExprUnaryOperator, ExprBinaryOperator and diversify)
rdfop:operator a rdf:Property ; rdfs:domain rdfop:Expr ; rdfs:range rdfs:Literal .
rdfop:left a rdf:Property ; rdfs:domain rdfop:Expr ; rdfs:range rdf:Resource .
rdfop:right a rdf:Property ; rdfs:domain rdfop:Expr ; rdfs:range rdf:Resource .
rdfop:value a rdf:Property ; rdfs:domain rdfop:Expr ; rdfs:range rdfs:Literal .

# Labels and localization
rdfs:label a rdf:Property ; rdfs:domain rdf:Resource ; rdfs:range rdfs:Literal .

################################################################
# Runtime View Components (bootstrap)
################################################################

# Property to map a type to a view function name
rdfop:viewFunction a rdf:Property ; rdfs:domain rdfop:EntityType ; rdfs:range rdfs:Literal .
rdfop:viewTemplate a rdf:Property ; rdfs:domain rdfop:EntityType ; rdfs:range rdfs:Literal .

# Component type: HTMLView
rdfop:HTMLView a rdfop:EntityType .

# Attribute for HTMLView content
rdfop:html a rdf:Property ; rdfs:domain rdfop:HTMLView ; rdfs:range rdfs:Literal .

# Map HTMLView to the RDFHP template used by the renderer
rdfop:HTMLView rdfop:viewTemplate "@PREFIX rdfop: <https://launix.de/rdfop/schema#> . SELECT ?h WHERE { ?id rdfop:html ?h } BEGIN PRINT RAW ?h END" .

################################################################
# Demo Page Type + Editor Components (hello world)
################################################################

rdfop:Page a rdfop:EntityType .

rdfop:pageTitle a rdf:Property ;
  rdfs:domain rdfop:Page ;
  rdfs:range rdfs:Literal .

rdfop:pageBody a rdf:Property ;
  rdfs:domain rdfop:Page ;
  rdfs:range rdfs:Literal .

rdfop:Page rdfop:viewTemplate "@PREFIX rdfop: <https://launix.de/rdfop/schema#> .
SELECT ?title ?body ?subjectStr WHERE {
  OPTIONAL { ?id rdfop:pageTitle ?title0 }
  OPTIONAL { ?id rdfop:pageBody ?body0 }
  BIND(STR(?id) AS ?subjectStr)
  BIND(IF(bound(?title0), ?title0, "Untitled Page") AS ?title)
  BIND(IF(bound(?body0), ?body0, "<p class='empty'>No page content.</p>") AS ?body)
}
BEGIN
?><div class='page-view pad'>
  <div class='page-view__header'>
    <h1 class='page-view__title'><?rdf PRINT HTML ?title ?></h1>
    <button class='btn' type='button' onclick='return openOverlay("/component?id=https://launix.de/rdfop/schema#PageEditComponent&subject=<?rdf PRINT URL ?subjectStr ?>")'>Edit</button>
  </div>
  <div class='page-view__body'><?rdf PRINT RAW ?body ?></div>
</div><?rdf
END" .

rdfop:PageViewTemplate a rdfop:EntityType .

rdfop:PageViewTemplate rdfop:viewTemplate "@PREFIX rdfop: <https://launix.de/rdfop/schema#> .
PARAMETER ?subject "subject"
SELECT ?page ?pageStr ?title ?body WHERE {
  BIND(IRI(?subject) AS ?page)
  BIND(STR(?page) AS ?pageStr)
  OPTIONAL { ?page rdfop:pageTitle ?title0 }
  OPTIONAL { ?page rdfop:pageBody ?body0 }
  BIND(IF(bound(?title0), ?title0, "Untitled Page") AS ?title)
  BIND(IF(bound(?body0), ?body0, "<p class='empty'>No page content.</p>") AS ?body)
  FILTER(STRLEN(?subject) > 0)
}
BEGIN
?><div class='page-view pad' data-page-target='<?rdf PRINT HTML ?pageStr ?>'>
  <div class='page-view__header'>
    <h1 class='page-view__title'><?rdf PRINT HTML ?title ?></h1>
    <button class='btn' type='button' onclick='return openOverlay("/component?id=https://launix.de/rdfop/schema#PageEditComponent&subject=<?rdf PRINT URL ?pageStr ?>")'>Edit</button>
  </div>
  <div class='page-view__body'><?rdf PRINT RAW ?body ?></div>
</div><?rdf
ELSE
?><div class='empty'>No page selected.</div><?rdf
END" .

rdfop:PageViewComponent a rdfop:EditorComponent , rdfop:PageViewTemplate ;
  rdfop:forTypes rdfop:Page .

rdfop:PageEditTemplate a rdfop:EntityType .

rdfop:PageEditTemplate rdfop:viewTemplate "@PREFIX rdfop: <https://launix.de/rdfop/schema#> .
PARAMETER ?subject "subject"
SELECT ?page ?pageStr ?title ?body WHERE {
  BIND(IRI(?subject) AS ?page)
  BIND(STR(?page) AS ?pageStr)
  OPTIONAL { ?page rdfop:pageTitle ?title0 }
  OPTIONAL { ?page rdfop:pageBody ?body0 }
  BIND(IF(bound(?title0), ?title0, "Untitled Page") AS ?title)
  BIND(IF(bound(?body0), ?body0, "") AS ?body)
  FILTER(STRLEN(?subject) > 0)
}
BEGIN
?><div class='page-edit pad' data-page-target='<?rdf PRINT HTML ?pageStr ?>'>
  <h2 class='page-edit__headline'>Edit Page</h2>
  <form class='page-edit__form' data-rdfop-page-editor='1'>
    <input type='hidden' name='subject' value='<?rdf PRINT HTML ?pageStr ?>'>
    <label class='page-edit__field'>
      <span class='muted'>Title</span>
      <input class='input w-100' type='text' name='title' value='<?rdf PRINT HTML ?title ?>' required>
    </label>
    <label class='page-edit__field'>
      <span class='muted'>Body (HTML)</span>
      <textarea class='input w-100 h-30vh' name='body'><?rdf PRINT HTML ?body ?></textarea>
    </label>
    <div class='mt-2'>
      <button class='btn primary' type='submit'>Save</button>
    </div>
  </form>
  <div class='page-edit__status muted'>Make changes and press Save.</div>
</div><?rdf
ELSE
?><div class='empty'>No page selected.</div><?rdf
END" .

rdfop:PageEditComponent a rdfop:EditorComponent , rdfop:PageEditTemplate ;
  rdfop:forTypes rdfop:Page .

################################################################
# Runtime View Components (minimal bootstrap)
################################################################

# Declare HTMLView as an entity type used for runtime components
HTMLView a rdfop:EntityType .

# Minimal mapping: which view function to invoke for this type
# The engine will call rdf_functions named "view_" + value
HTMLView viewFunction "HTMLView" .
