@prefix rdfop: <https://launix.de/rdfop/schema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

################################################################
# RDFOP Final Self-Describing Schema
################################################################

# Classes
rdfop:EntityType a rdfs:Class .
rdfop:Attribute a rdfs:Class .
rdfop:EditorComponent a rdfs:Class .
rdfop:CodeGenerator a rdfs:Class .
rdfop:Expr a rdfs:Class .
rdfop:Parameter a rdfs:Class .
rdfop:ChangeSet a rdfs:Class .
rdfop:Tenant a rdfs:Class .
# TODO: rdfop:Enum

# TODO: owl:cardinality 1 for required attributes
# TODO: owl:minCardinality 1 for required multi-attributes
# TODO: owl:maxCardinality 1 for optional attributes
# TODO: schema verifier inside the transaction

# Entity / Attribute definitions
rdfop:hasAttribute a rdf:Property ; rdfs:domain rdfop:EntityType ; rdfs:range rdfop:Attribute .
rdfop:attrName a rdf:Property ; rdfs:domain rdfop:Attribute ; rdfs:range rdfs:Literal .
rdfop:attrType a rdf:Property ; rdfs:domain rdfop:Attribute ; rdfs:range rdfs:Resource . # reference to type or datatype
rdfop:cardinality a rdf:Property ; rdfs:domain rdfop:Attribute ; rdfs:range rdfs:Literal . # "0..1", "1", "0..n"
rdfop:attrKind a rdf:Property ; rdfs:domain rdfop:Attribute ; rdfs:range rdfs:Literal .
rdfop:recursiveDelete a rdf:Property ; rdfs:domain rdfop:EntityType ; rdfs:range rdfs:Literal .

# Editor components
rdfop:forTypes a rdf:Property ; rdfs:domain rdfop:EditorComponent ; rdfs:range rdfop:EntityType .
rdfop:parameters a rdf:Property ; rdfs:domain rdfop:EditorComponent ; rdfs:range rdfs:Literal . # specify the parameters that have to be set to instanciate this component
rdfop:input a rdf:Property ; rdfs:domain rdfop:EditorComponent ; rdfs:range rdfs:Literal . # RDFJSON query (can use the parameters) to fetch the `data` object
rdfop:inputVariable a rdf:Property ; rdfs:domain rdfop:EditorComponent ; rdfs:range rdfs:Literal . # bind JSON to this object? (for nested templates that should be able to access their parents data)
rdfop:template a rdf:Property ; rdfs:domain rdfop:EditorComponent ; rdfs:range rdfs:Literal . # RDFHP query (can use the parameters) to render the vue.js template
rdfop:initTemplate a rdf:Property ; rdfs:domain rdfop:EditorComponent ; rdfs:range rdfs:Literal . # JSON object for new items

# Code Generators
rdfop:handlesNodeType a rdf:Property ; rdfs:domain rdfop:CodeGenerator ; rdfs:range rdfop:EntityType .
rdfop:language a rdf:Property ; rdfs:domain rdfop:CodeGenerator ; rdfs:range rdfs:Literal .
rdfop:template a rdf:Property ; rdfs:domain rdfop:CodeGenerator ; rdfs:range rdfs:Literal .

# Expressions (TODO: add more Classes: ExprConstant, ExprUnaryOperator, ExprBinaryOperator and diversify)
rdfop:operator a rdf:Property ; rdfs:domain rdfop:Expr ; rdfs:range rdfs:Literal .
rdfop:left a rdf:Property ; rdfs:domain rdfop:Expr ; rdfs:range rdf:Resource .
rdfop:right a rdf:Property ; rdfs:domain rdfop:Expr ; rdfs:range rdf:Resource .
rdfop:value a rdf:Property ; rdfs:domain rdfop:Expr ; rdfs:range rdfs:Literal .

# Labels and localization
rdfs:label a rdf:Property ; rdfs:domain rdf:Resource ; rdfs:range rdfs:Literal .

################################################################
# Runtime View Components (minimal bootstrap)
################################################################

# Declare HTMLView as an entity type used for runtime components
HTMLView a rdfop:EntityType .

# Minimal mapping: which view function to invoke for this type
# The engine will call rdf_functions named "view_" + value
HTMLView viewFunction "HTMLView" .
